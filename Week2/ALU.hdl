// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    
    //HUGE REMARK -> Mux is the closest thing to if{}else{} you'll get
    /*
    *   lets say you want to check [zx]   
    *
    *   if(zx==1){
    *       do a
    *   }
    *   else{
    *       do b
    *   }
    *
    *   can be done as Mux16(a,b,zx,output) 
    *
    */ 

    // handle [zx] and [nx]
    Mux16(a=x , b=false , sel=zx, out=xZX );
    Not16(in=xZX,out=NEQxZX);
    Mux16(a=xZX,b=NEQxZX,sel=nx,out=xZXZN);

    // handle [zy] and [ny]
    Mux16(a=y , b=false , sel=zy, out=yZY );
    Not16(in=yZY,out=NEQyZY);
    Mux16(a=yZY,b=NEQyZY,sel=ny,out=yZYZN);

    // handle [f]
    Add16(a=xZXZN, b=yZYZN, out=ADDxy);
    And16(a=xZXZN, b=yZYZN, out=PLUSxy);
    Mux16(a=PLUSxy , b=ADDxy , sel=f , out=xy );

    // handle [no]
    // retarded splitting up of [out]
    // --> for later finding [zr]
    // + finding [ng] right now by simply looking at
    // sign bit (far-left one, hence out[15])
    Not16(in=xy,out=NEQxy);
    Mux16(a=xy,b=NEQxy,sel=no,out[0..7]=temp1,
        out[8..15]=temp2, 
        out[15]=ng,
        out=out);
    
    // [out] is 0 iff there are only 0's (duh)
    // reduce 0-7 with OR, then 8-15 with OR 
    // (hence the retarded splitting before)
    // --> then just OR those 2 reductions
    // --> store the negation into zr (XOR saves us 1 NOT gate)
    Or8Way(in=temp1 , out=zr1 );
    Or8Way(in=temp2 , out=zr2 );
    Or(a=zr1 , b=zr2 , out=tzr );
    Xor(a=true,b=tzr,out=zr);


    

}